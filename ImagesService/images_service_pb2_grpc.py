# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from ImagesService import images_service_pb2 as ImagesService_dot_images__service__pb2


class ImagesAPIStub(object):
    """Методы, которые предоставляет Images Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/ImagesAPI/List',
                request_serializer=ImagesService_dot_images__service__pb2.User.SerializeToString,
                response_deserializer=ImagesService_dot_images__service__pb2.ResponseWithImagesList.FromString,
                )
        self.Find = channel.unary_unary(
                '/ImagesAPI/Find',
                request_serializer=ImagesService_dot_images__service__pb2.Image.SerializeToString,
                response_deserializer=ImagesService_dot_images__service__pb2.ResponseWithImage.FromString,
                )
        self.Delete = channel.unary_unary(
                '/ImagesAPI/Delete',
                request_serializer=ImagesService_dot_images__service__pb2.Image.SerializeToString,
                response_deserializer=ImagesService_dot_images__service__pb2.Response.FromString,
                )


class ImagesAPIServicer(object):
    """Методы, которые предоставляет Images Service
    """

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImagesAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=ImagesService_dot_images__service__pb2.User.FromString,
                    response_serializer=ImagesService_dot_images__service__pb2.ResponseWithImagesList.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=ImagesService_dot_images__service__pb2.Image.FromString,
                    response_serializer=ImagesService_dot_images__service__pb2.ResponseWithImage.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=ImagesService_dot_images__service__pb2.Image.FromString,
                    response_serializer=ImagesService_dot_images__service__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImagesAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImagesAPI(object):
    """Методы, которые предоставляет Images Service
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/List',
            ImagesService_dot_images__service__pb2.User.SerializeToString,
            ImagesService_dot_images__service__pb2.ResponseWithImagesList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/Find',
            ImagesService_dot_images__service__pb2.Image.SerializeToString,
            ImagesService_dot_images__service__pb2.ResponseWithImage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/Delete',
            ImagesService_dot_images__service__pb2.Image.SerializeToString,
            ImagesService_dot_images__service__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class UsersAPIStub(object):
    """Методы Users Service, которыми пользуется Images Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Verify = channel.unary_unary(
                '/UsersAPI/Verify',
                request_serializer=ImagesService_dot_images__service__pb2.User.SerializeToString,
                response_deserializer=ImagesService_dot_images__service__pb2.ResponseWithUser.FromString,
                )


class UsersAPIServicer(object):
    """Методы Users Service, которыми пользуется Images Service
    """

    def Verify(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Verify': grpc.unary_unary_rpc_method_handler(
                    servicer.Verify,
                    request_deserializer=ImagesService_dot_images__service__pb2.User.FromString,
                    response_serializer=ImagesService_dot_images__service__pb2.ResponseWithUser.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UsersAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsersAPI(object):
    """Методы Users Service, которыми пользуется Images Service
    """

    @staticmethod
    def Verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/Verify',
            ImagesService_dot_images__service__pb2.User.SerializeToString,
            ImagesService_dot_images__service__pb2.ResponseWithUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
